from sqlalchemy import Table, Column, ForeignKey
from sqlalchemy.sql.sqltypes import Integer, String, Date
import sqlalchemy as db
from config.db2 import meta



relperproducto = db.Table("rel_persona_producto_contenedor", meta,
                          Column("rowid_object", String(14), primary_key=True),
                          Column("cd_tipo_documento",String(20)),
                          Column("numero_documento",String(30)),
                          Column("cd_fuente",String(100)),
                          Column("cd_tipo_producto",String(30)),
                          Column("numero_producto",String(255)),
                          Column("cd_relacion_producto",String(30)),
                          Column("cd_tipo_plan",String(30)),
                          Column("fecha_inicio_relacion",String()),
                          Column("fecha_fin_relacion",Date()),
                          Column("cd_estado_contrato",String(30)),
                          Column("cd_estado_homologado",String(30)),
                          Column("fecha_actualizacion",Date()),
                          Column("numero_documento_externo",String(30)),
                          )

datosbasicos = db.Table("datos_basicos_contenedor", meta, 
                Column("rowid_object", String(14), primary_key=True),  
                Column("hub_state_ind", Integer()),
                Column("cd_segmento", String(20)),
                Column("consolidation_ind", Integer()),
                Column("cd_ciiu", String(20)),
                Column("cd_actividad_economica", String(20)),
                Column("cd_consulta_de_extractos", String(20)),
                Column("cd_genero", String(20)),
                Column("cd_ocupacion", String(20)),
                Column("cd_ciudad_expedicion", String(20)),
                Column("cd_tipo_interlocutor_comer", String(20)),
                Column("nombre_o_razon", String(250)),
                Column("nombre_corto_o_sigla", String(50)),
                Column("cd_subsegmento", String(20)),
                Column("tamano_comercial", Integer()),
                Column("fl_persona_no_objetivo_com", String(1)),
                Column("fl_persona_bloqueada", String(1)),
                Column("cd_sub_ciiu", String(20)),
                Column("cd_sector", String(20)),
                Column("cd_subsector", String(20)),
                Column("fl_no_aut_compartir_inform", String(1)),
                Column("fl_no_aut_recibir_ofertas", String(1)),
                Column("fl_no_aut_envio_msj_texto", String(1)),
                Column("fl_no_aut_envio_correos", String(1)),
                Column("fl_tesoreria", String(1)),
                Column("cd_rol_de_negocio", String(20)),
                Column("fl_realiza_ope_moneda_ext", String(1)),
                Column("cd_estado_vinculacion", String(20)),
                Column("cd_tipo_relacionado", String(20)),
                Column("cd_relacionamiento", String(20)),
                Column("cd_segmentacion_sarlaft", String(20)),
                Column("cd_calificacion_interna", String(20)),
                Column("cd_reporte_costos_totales", String(20)),
                Column("cd_medio_actualizacion", String(20)),
                Column("cd_estado_cliente", String(20)),
                Column("fl_aut_recibir_ext_pdf", String(1)),
                Column("cd_tratamiento", String(20)),
                Column("primer_nombre", String(50)),
                Column("segundo_nombre", String(50)),
                Column("primer_apellido", String(50)),
                Column("segundo_apellido", String(50)),
                Column("cd_pais_nacimiento", String(20)),
                Column("cd_departamento_nacimiento", String(20)),
                Column("cd_ciudad_nacimiento", String(20)),
                Column("cd_estado_civil", String(20)),
                Column("cd_nivel_academico", String(20)),
                Column("cd_profesion", String(20)),
                Column("cd_tipo_contrato", String(20)),
                Column("empresa_donde_labora", String(50)),
                Column("cd_cargo_u_oficio", String(20)),
                Column("cd_estrato", String(20)),
                Column("cd_tipo_vivienda", String(20)),
                Column("personas_a_cargo", String(20)),
                Column("numero_de_hijos", Integer()),
                Column("fl_pep_colombia", String(1)),
                Column("fl_fallecido", String(1)),
                Column("fl_secuestrado", String(1)),
                Column("cd_incapaz", String(20)),
                Column("codigo_sisben", String(30)),
                Column("fl_empleado", String(1)),
                Column("registro_desplazado", String(30)),
                Column("cd_tipo_entidad", String(20)),
                Column("cd_entidad_estatal", String(20)),
                Column("cd_sociedad_comerc_o_civil", String(20)),
                Column("cd_naturaleza_entidad", String(20)),
                Column("cd_entidad_estatal_descent", String(20)),
                Column("fl_empresa_liquidada", String(1)),
                Column("fl_ley_intervencion", String(1)),
                Column("cd_clase_de_grupo", String(1)),
                Column("cd_tipo_documento", String(20)),
                Column("numero_documento", String(30)),
                Column("cd_departamento_expedicion", String(20)),
                Column("cd_pais_expedicion", String(20)),
                Column("numero_documento_externo", String(30)),
                Column("cd_estado_documento" ,String(20)))

datoscomplem = db.Table("datos_complementarios_contenedor", meta, 
                Column("id_persona", String(14), ForeignKey("datos_basicos_contenedor.rowid_object")),
                Column("cd_nacionalidad", String(80)),
                Column("fl_nacionalidad_principal", String(4)),
                Column("cd_tipo_operaciones", String(80)),
                Column("nombre_entidad", String(200)),
                Column("cd_tipo_producto", String(80)),
                Column("numero_producto", String(80)),
                Column("monto_mensual", String(15)),
                Column("cd_moneda", String(80)),
                Column("cd_pais", String(80)),
                Column("cd_departamento", String(80)),
                Column("cd_ciudad", String(80)),
                Column("cd_tipo_documento", String(20)),
                Column("numero_documento", String(30)))

# llaveros = db.Table("pkg_llavero_batch", meta,
#                 Column("llave_mdm", String(14), primary_key=True),
#                 Column("llave_crm", String(255)), 
#                 Column("llave_cif", String(255)), 
#                 Column("tipoid", String(20)), 
#                 Column("numeroid", String(255)), 
#                 Column("numeroid_externo", String(20)), 
#                 Column("numeroid_externo", String(20)))

